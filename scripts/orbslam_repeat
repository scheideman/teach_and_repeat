#!/usr/bin/env python
import rospy
from sensor_msgs.msg import Joy
from std_srvs.srv import Empty
from geometry_msgs.msg import PoseArray
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Twist
from ros_numpy import numpify
import tf2_ros
import tf.transformations as tftrans

from enum import IntEnum
import numpy as np

from repeat_trajectory import FollowTrajectoryController

class Button(IntEnum):
    Y = 3
    A = 0
    B = 1
    X = 2



class RepeatTrajectoryNode(object):
    def __init__(self, slam_id):
        self._slam_id = slam_id
        self._robot_pose = None
        self._tfBuffer = tf2_ros.Buffer()
        self._tf_listener = tf2_ros.TransformListener(self._tfBuffer)

        self._joy_subscribe = rospy.Subscriber(
            "/joy", Joy, callback=self._joy_callback)
        self._pose_subscribe = rospy.Subscriber(
            self._slam_id + "/pose", PoseStamped, callback=self._pose_callback)
        self._keyframes_subscribe = rospy.Subscriber(
            self._slam_id + "/keyframes", PoseArray, callback=self._keyframes_callback)
        self._cmd_vel_pub = rospy.Publisher("/repeat_controller/cmd_vel", Twist, queue_size=1)
        
        rospy.loginfo("Waiting for request_keyframes service...")
        rospy.wait_for_service('request_keyframes')
        self._request_keyframes_proxy = rospy.ServiceProxy(
            'request_keyframes', Empty)
        rospy.loginfo("request_keyframes is available")

        self._controller = FollowTrajectoryController()

        self._run_on = True
        self._started = False

    def _joy_callback(self, msg):
        if msg.buttons[Button.Y]:
            self._request_keyframes_proxy()
        elif msg.buttons[Button.B]:
            self._run_on = not self._run_on
            if(self._run_on):
                rospy.loginfo("Turned drive publishing on")
            else:
                rospy.loginfo("Turned drive publishing off")
        elif msg.buttons[Button.A]:
            pass
            # if not self._started:
            #     rospy.loginfo("Starting repeat trajectory node...")
            #     self.run()
        elif msg.buttons[Button.X]:
            pass


    def _pose_callback(self, msg):
        self._robot_pose = msg.pose

    def _keyframes_callback(self, msg):
        poses = self._pose_array_to_list(msg)
        self._controller.init_controller(poses)

    def _pose_array_to_list(self, poseArray):
        np_poses = []
        for pose in poseArray.poses:
            np_pose = numpify(pose)
            np_poses.append(np_pose)
        return np_poses

    def run(self):
        rospy.loginfo("Waiting for keyframe trajectory...")
        while not rospy.is_shutdown() and not self._controller.initialized:
            pass
        self._controller._init_plotting()
        rate = rospy.Rate(20)
        rospy.loginfo("Starting repeat trajectory loop...")        
        while not rospy.is_shutdown():
            if self._run_on:
                try:
                    trans = self._tfBuffer.lookup_transform("map", "camera_link", rospy.Time())
                    self._drive(trans)
                except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
                    pass

            rate.sleep()

    def _drive(self, trans):
        x = trans.transform.translation.x
        y = trans.transform.translation.y
        rot = trans.transform.rotation
        quat = [rot.x, rot.y, rot.z, rot.w]
        euler_angles = tftrans.euler_from_quaternion(quat)

        ang = self._controller.get_angular_control(np.array([x,y]), euler_angles[2])
        lin = self._controller.get_linear_control()

        control_msg = self._construct_twist_message(ang,lin)
        self._cmd_vel_pub.publish(control_msg)
    
    def _construct_twist_message(self, angular, linear):
        control_msg = Twist()
        control_msg.linear.x = linear
        control_msg.angular.z = angular

        return control_msg

if __name__ == "__main__":
    rospy.init_node("orbslam_repeat")
    repeatNode = RepeatTrajectoryNode("/orb_slam2_rgbd")
    repeatNode.run()

